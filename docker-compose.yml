version: '3.3'
# version of docker-compose that we are using
services:
# containters we want to run
  resultsapi:
  #name of service
    # provides an API for CRUD* operations to database
    build:
    # Docker parses the docker-compose file and builds our services according to the build instructions.
      context: ./resultsapi
      # where the Dockerfile is located at to build the image
    image: postgres:latest
    environment: 
    # its value at build time is the value in the environment where Compose is running (no need to import os).
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_HOST
      - POSTGRES_DB
      - POSTGRES_PORT
      - RESULTS_API_SERVER
    # variables necessary to connect to database
    ports:
      - 5001:5000  # <host machine>:<container> map ports from the host machine to the container
    # incoming requests at host port 5001 will be forwarded to the port 5000 of the api container
    # runs on local computer at localhost:5001
    volumes:
      - ./resultsapi/src:/resultsapi
      - dbvolume:/var/lib/postgresql/data     # This mounts the .resultsapi/src directory on our host computer to the /app directory in the container. 
 #   depends_on:
#      - postgres
    # it will wait for database to start before starting this service.

  front-end:
      build:
        context: ./frontend
      environment:
        - RESULTS_API_SERVER
      ports:
        - 5000:5000
      volumes:
        - ./frontend/src:/app
      depends_on:
        - resultsapi

#  postgresdb:
      # provides an instance of postgress database
        # postgress automatically makes the user and password based on these env variables
        # so we can use this user and pswd on api to connect to db

    # Inside the container, this directory is where Postgres stores all the relevant tables and databases.
    # We are defining a volume inside the compose file and mounting it at this mount point.
  
volumes:
  # For data persistence purposes, we are storing data in a mouted volume which we have named dbvolume
  dbvolume:
    driver: local

  # postgress with docker-compose learned here: https://docs.docker.com/samples/library/postgres/
  # and here: https://linuxhint.com/run_postgresql_docker_compose/
  # and here: https://medium.com/@audretschjames/understanding-docker-as-if-it-were-a-gameboy-96c96392efbf

# add a server to database and connect like api is doing, then that's the api?